"""Add BIA framework tables

Revision ID: 2222d6dbed69
Revises: ca0870ddf63f
Create Date: 2025-06-12 20:30:59.648626

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '2222d6dbed69'
down_revision: Union[str, None] = 'ca0870ddf63f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

from sqlalchemy import inspect
import sqlalchemy.exc
import pymysql.err


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE IF EXISTS process_applications CASCADE;")
    op.execute("DROP TABLE IF EXISTS process_dependencies CASCADE;")
    op.execute("DROP TABLE IF EXISTS process_locations CASCADE;")
    op.execute("DROP TABLE IF EXISTS bia_impact_scale_levels CASCADE;")
    op.execute("DROP TABLE IF EXISTS processes CASCADE;")
    op.execute("DROP TABLE IF EXISTS bia_impact_scales CASCADE;")
    op.execute("DROP TABLE IF EXISTS bia_timeframes CASCADE;")
    op.execute("DROP TABLE IF EXISTS vendors CASCADE;")
    op.create_table('bia_impact_scales',
    sa.Column('id', mysql.CHAR(36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('rating_type', sa.Enum('QUALITATIVE', 'QUANTITATIVE', name='ratingtype'), nullable=False),
    sa.Column('organization_id', mysql.CHAR(36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('bia_timeframes',
    sa.Column('id', mysql.CHAR(36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.Column('organization_id', mysql.CHAR(36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('vendors',
    sa.Column('id', mysql.CHAR(36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('contact_person', sa.String(length=255), nullable=True),
    sa.Column('contact_email', sa.String(length=255), nullable=True),
    sa.Column('contact_phone', sa.String(length=50), nullable=True),
    sa.Column('service_provided', sa.Text(), nullable=True),
    sa.Column('criticality', sa.Enum('HIGH', 'MEDIUM', 'LOW', name='vendor_criticality_enum'), nullable=False),
    sa.Column('isActive', sa.Boolean(), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updatedAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('organizationId', mysql.CHAR(36), nullable=False),
    sa.Column('createdBy', mysql.CHAR(36), nullable=True),
    sa.Column('updatedBy', mysql.CHAR(36), nullable=True),
    sa.ForeignKeyConstraint(['createdBy'], ['users.id'], ondelete='SET NULL', use_alter=True),
    sa.ForeignKeyConstraint(['organizationId'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updatedBy'], ['users.id'], ondelete='SET NULL', use_alter=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vendors_id'), 'vendors', ['id'], unique=False)
    op.create_index(op.f('ix_vendors_name'), 'vendors', ['name'], unique=False)
    op.create_index(op.f('ix_vendors_organizationId'), 'vendors', ['organizationId'], unique=False)
    op.create_table('bia_impact_scale_levels',
    sa.Column('id', mysql.CHAR(36), nullable=False),
    sa.Column('scale_id', mysql.CHAR(36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('min_range', sa.Float(), nullable=True),
    sa.Column('max_range', sa.Float(), nullable=True),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['scale_id'], ['bia_impact_scales.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('processes',
    sa.Column('id', mysql.CHAR(36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sla', sa.String(length=255), nullable=True),
    sa.Column('tat', sa.String(length=255), nullable=True),
    sa.Column('seasonality', sa.String(length=255), nullable=True),
    sa.Column('peak_times', sa.String(length=255), nullable=True),
    sa.Column('frequency', sa.String(length=255), nullable=True),
    sa.Column('num_team_members', sa.Integer(), nullable=True),
    sa.Column('department_id', mysql.CHAR(36), nullable=False),
    sa.Column('process_owner_id', mysql.CHAR(36), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', mysql.CHAR(36), nullable=True),
    sa.Column('updated_by_id', mysql.CHAR(36), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='fk_process_created_by', use_alter=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['process_owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], name='fk_process_updated_by', use_alter=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'department_id', name='_process_name_department_uc')
    )
    op.create_table('process_applications',
    sa.Column('process_id', mysql.CHAR(36), nullable=False),
    sa.Column('application_id', mysql.CHAR(36), nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ),
    sa.ForeignKeyConstraint(['process_id'], ['processes.id'], ),
    sa.PrimaryKeyConstraint('process_id', 'application_id')
    )
    op.create_table('process_dependencies',
    sa.Column('upstream_process_id', mysql.CHAR(36), nullable=False),
    sa.Column('downstream_process_id', mysql.CHAR(36), nullable=False),
    sa.ForeignKeyConstraint(['downstream_process_id'], ['processes.id'], ),
    sa.ForeignKeyConstraint(['upstream_process_id'], ['processes.id'], ),
    sa.PrimaryKeyConstraint('upstream_process_id', 'downstream_process_id')
    )
    op.create_table('process_locations',
    sa.Column('process_id', mysql.CHAR(36), nullable=False),
    sa.Column('location_id', mysql.CHAR(36), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['process_id'], ['processes.id'], ),
    sa.PrimaryKeyConstraint('process_id', 'location_id')
    )
    conn = op.get_bind()
    inspector = inspect(conn)
    application_columns = [col['name'] for col in inspector.get_columns('applications')]

    if 'type' not in application_columns:
        op.add_column('applications', sa.Column('type', sa.Enum('SAAS', 'OWNED', name='application_type_enum', create_constraint=True), nullable=False))
    if 'hostedOn' not in application_columns:
        op.add_column('applications', sa.Column('hostedOn', sa.String(length=255), nullable=True))
    if 'workarounds' not in application_columns:
        op.add_column('applications', sa.Column('workarounds', sa.Text(), nullable=True))
    if 'derivedRTO' not in application_columns:
        op.add_column('applications', sa.Column('derivedRTO', sa.String(length=50), nullable=True))
    if 'createdById' not in application_columns:
        op.add_column('applications', sa.Column('createdById', mysql.CHAR(36), nullable=True))
    if 'updatedById' not in application_columns:
        op.add_column('applications', sa.Column('updatedById', mysql.CHAR(36), nullable=True))
    op.execute("SET foreign_key_checks = 0;")
    try:
        try:
            op.drop_constraint('fk_applications_appOwnerId_people', 'applications', type_='foreignkey')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_constraint('fk_applications_createdBy_people', 'applications', type_='foreignkey')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_constraint('fk_applications_updatedBy_people', 'applications', type_='foreignkey')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_constraint('fk_applications_deletedBy_people', 'applications', type_='foreignkey')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_constraint('fk_applications_organizationId_organizations', 'applications', type_='foreignkey')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_appOwnerId', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_createdBy', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_deletedBy', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_id', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_is_deleted', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_name', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_organizationId', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_status', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
        try:
            op.drop_index('ix_applications_updatedBy', table_name='applications')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass
            else:
                raise
            try:
                op.create_unique_constraint('_application_name_organization_uc', 'applications', ['name', 'organizationId'])
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] in (1061, 1022):
                    pass # Constraint or an index with the same name/columns already exists
                else:
                    raise
        op.create_foreign_key('fk_applications_appOwnerId_people', 'applications', 'users', ['appOwnerId'], ['id'])
        try:
            op.create_foreign_key('fk_application_created_by', 'applications', 'users', ['createdById'], ['id'], ondelete='SET NULL', use_alter=True)
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] in (1061, 1826):
                pass # Constraint already exists
            else:
                raise
        try:
            op.create_foreign_key('fk_application_updated_by', 'applications', 'users', ['updatedById'], ['id'], ondelete='SET NULL', use_alter=True)
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] in (1061, 1826):
                pass # Constraint already exists
            else:
                raise
        op.create_foreign_key('fk_applications_organizationId_organizations', 'applications', 'organizations', ['organizationId'], ['id'])
        try:
            op.drop_column('applications', 'createdBy')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'is_deleted')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'updatedBy')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'deletedAt')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'applicationType')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'version')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'hostingEnvironment')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'deletedBy')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
        try:
            op.drop_column('applications', 'vendor')
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
                pass # Column doesn't exist
            else:
                raise
    finally:
        op.execute("SET foreign_key_checks = 1;")
    op.alter_column('bia_categories', 'id',
               existing_type=mysql.VARCHAR(length=36),
               type_=mysql.CHAR(length=36),
               existing_nullable=False)
    try:
        op.drop_constraint('fk_bia_categories_organization_id', 'bia_categories', type_='foreignkey')
    except sqlalchemy.exc.OperationalError as e:
        if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
            pass # Constraint doesn't exist
        else:
            raise
    op.alter_column('bia_categories', 'organization_id',
               existing_type=mysql.VARCHAR(length=36),
               type_=mysql.CHAR(length=36),
               existing_nullable=False)
    op.create_foreign_key('fk_bia_categories_organization_id', 'bia_categories', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.alter_column('departments', 'isActive',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False,
               existing_server_default=sa.text("'1'"))
    op.alter_column('departments', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    op.alter_column('departments', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    op.alter_column('organizations', 'isActive',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False,
               existing_server_default=sa.text("'1'"))
    op.alter_column('organizations', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    op.alter_column('organizations', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    try:
        op.drop_index(op.f('name'), table_name='permissions')
    except sqlalchemy.exc.OperationalError as e:
        if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
            pass  # Index doesn't exist
        else:
            raise
    op.alter_column('roles', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    op.alter_column('roles', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    try:
        op.drop_constraint(op.f('fk_roles_organization_id_organizations'), 'roles', type_='foreignkey')
    except sqlalchemy.exc.OperationalError as e:
        if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091:
            pass  # Constraint doesn't exist
        else:
            raise
    try:
        op.create_foreign_key('fk_roles_organization_id_organizations', 'roles', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    except sqlalchemy.exc.OperationalError as e:
        if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] in (1061, 1826):
            pass  # Constraint already exists or duplicate key name
        else:
            raise
    op.alter_column('user_roles', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('users', 'isActive',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False,
               existing_server_default=sa.text("'1'"))
    op.alter_column('users', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    op.alter_column('users', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    op.execute("SET foreign_key_checks = 0;")
    try:
        # Define FKs that depend on indexes we are about to modify/drop
        # These will be dropped first, then recreated after new indexes are up.
        foreign_keys_details = [
            {'name': op.f('fk_users_departmentId_departments'), 'source': 'users', 'remote': 'departments',
             'local_cols': ['departmentId'], 'remote_cols': ['id'], 'ondelete': None, 'onupdate': None},
            {'name': op.f('fk_users_locationId_locations'), 'source': 'users', 'remote': 'locations',
             'local_cols': ['locationId'], 'remote_cols': ['id'], 'ondelete': None, 'onupdate': None},
            {'name': op.f('fk_users_organizationId_organizations'), 'source': 'users', 'remote': 'organizations',
             'local_cols': ['organizationId'], 'remote_cols': ['id'], 'ondelete': None, 'onupdate': None},
        ]

        # 1. Drop these FKs first
        for fk_detail in foreign_keys_details:
            try:
                op.drop_constraint(fk_detail['name'], fk_detail['source'], type_='foreignkey')
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091: # Constraint/Key does not exist
                    pass
                else:
                    raise

        # 2. Drop old indexes
        indexes_to_drop = [
            (op.f('ix_people_departmentId'), 'users'),
            (op.f('ix_people_email'), 'users'),
            (op.f('ix_people_id'), 'users'),
            (op.f('ix_people_locationId'), 'users'),
            (op.f('ix_people_organizationId'), 'users'),
            (op.f('uq_person_organization_email'), 'users'), # This might have been an index for a unique constraint
        ]
        for index_name, table_name in indexes_to_drop:
            try:
                op.drop_index(index_name, table_name=table_name)
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091: # Index does not exist
                    pass
                elif isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1553:
                    # This might happen if FKs were not dropped (e.g. wrong name) despite foreign_key_checks=0
                    print(f"WARNING: Failed to drop index {index_name} on {table_name} due to an active foreign key (Error 1553). FK drop might have failed or was missed. Proceeding...")
                    pass
                else:
                    raise

        # 3. Create new unique constraint
        try:
            op.create_unique_constraint('_user_email_organization_uc', 'users', ['email', 'organizationId'])
        except sqlalchemy.exc.OperationalError as e:
            if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1061: # Duplicate key name
                pass
            else:
                raise

        # 4. Create new indexes
        new_indexes_to_create = [
            (op.f('ix_users_departmentId'), 'users', ['departmentId'], False),
            (op.f('ix_users_email'), 'users', ['email'], False),
            (op.f('ix_users_id'), 'users', ['id'], False),
            (op.f('ix_users_locationId'), 'users', ['locationId'], False),
            (op.f('ix_users_organizationId'), 'users', ['organizationId'], False),
        ]
        for index_name, table_name, columns, unique_flag in new_indexes_to_create:
            try:
                op.create_index(index_name, table_name, columns, unique=unique_flag)
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1061: # Duplicate key name
                    pass
                else:
                    raise

        # 5. Recreate FKs (dropped in step 1)
        for fk_detail in foreign_keys_details:
            try:
                op.create_foreign_key(fk_detail['name'], fk_detail['source'], fk_detail['remote'],
                                     fk_detail['local_cols'], fk_detail['remote_cols'],
                                     onupdate=fk_detail['onupdate'], ondelete=fk_detail['ondelete'])
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] in (1826, 1061): # Duplicate FK name or key name
                    pass
                else:
                    raise

        # 6. Drop other FKs (related to createdBy/updatedBy, which are being removed)
        other_fks_to_drop = [
            (op.f('fk_people_updatedBy_people'), 'users'),
            (op.f('fk_people_createdBy_people'), 'users'),
        ]
        for fk_name, table_name in other_fks_to_drop:
            try:
                op.drop_constraint(fk_name, table_name, type_='foreignkey')
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091: # Constraint/Key does not exist
                    pass
                else:
                    raise

        # 7. Drop columns
        columns_to_drop = ['updatedBy', 'createdBy']
        for column_name in columns_to_drop:
            try:
                op.drop_column('users', column_name)
            except sqlalchemy.exc.OperationalError as e:
                if isinstance(e.orig, pymysql.err.OperationalError) and e.orig.args[0] == 1091: # Column does not exist
                    pass
                else:
                    raise
    finally:
        op.execute("SET foreign_key_checks = 1;")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('users', sa.Column('createdBy', mysql.CHAR(length=36), nullable=True))
    # op.add_column('users', sa.Column('updatedBy', mysql.CHAR(length=36), nullable=True))
    # op.create_foreign_key(op.f('fk_people_createdBy_people'), 'users', 'users', ['createdBy'], ['id'], ondelete='SET NULL')
    # op.create_foreign_key(op.f('fk_people_updatedBy_people'), 'users', 'users', ['updatedBy'], ['id'], ondelete='SET NULL')
    # op.drop_index(op.f('ix_users_organizationId'), table_name='users')
    # op.drop_index(op.f('ix_users_locationId'), table_name='users')
    # op.drop_index(op.f('ix_users_id'), table_name='users')
    # op.drop_index(op.f('ix_users_email'), table_name='users')
    # op.drop_index(op.f('ix_users_departmentId'), table_name='users')
    # op.drop_constraint('_user_email_organization_uc', 'users', type_='unique')
    # op.create_index(op.f('uq_person_organization_email'), 'users', ['organizationId', 'email'], unique=True)
    # op.create_index(op.f('ix_people_organizationId'), 'users', ['organizationId'], unique=False)
    # op.create_index(op.f('ix_people_locationId'), 'users', ['locationId'], unique=False)
    # op.create_index(op.f('ix_people_id'), 'users', ['id'], unique=False)
    # op.create_index(op.f('ix_people_email'), 'users', ['email'], unique=False)
    # op.create_index(op.f('ix_people_departmentId'), 'users', ['departmentId'], unique=False)
    op.alter_column('users', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('users', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('users', 'isActive',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text("'1'"))
    op.alter_column('user_roles', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(now())'))
    # op.drop_constraint(None, 'roles', type_='foreignkey')
    # op.create_foreign_key(op.f('fk_roles_organization_id_organizations'), 'roles', 'organizations', ['organization_id'], ['id'])
    op.alter_column('roles', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('roles', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    # op.create_index(op.f('name'), 'permissions', ['name'], unique=True)
    op.alter_column('organizations', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('organizations', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('organizations', 'isActive',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text("'1'"))
    op.alter_column('departments', 'updatedAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('departments', 'createdAt',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(now())'))
    op.alter_column('departments', 'isActive',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text("'1'"))
    op.alter_column('bia_categories', 'organization_id',
               existing_type=mysql.CHAR(length=36),
               type_=mysql.VARCHAR(length=36),
               existing_nullable=False)
    op.alter_column('bia_categories', 'id',
               existing_type=mysql.CHAR(length=36),
               type_=mysql.VARCHAR(length=36),
               existing_nullable=False)
    # op.add_column('applications', sa.Column('vendor', mysql.VARCHAR(length=255), nullable=True))
    # op.add_column('applications', sa.Column('deletedBy', mysql.CHAR(length=36), nullable=True))
    # op.add_column('applications', sa.Column('hostingEnvironment', mysql.VARCHAR(length=100), nullable=True))
    # op.add_column('applications', sa.Column('version', mysql.VARCHAR(length=50), nullable=True))
    # op.add_column('applications', sa.Column('applicationType', mysql.VARCHAR(length=100), nullable=True))
    # op.add_column('applications', sa.Column('deletedAt', mysql.DATETIME(), nullable=True))
    # op.add_column('applications', sa.Column('updatedBy', mysql.CHAR(length=36), nullable=True))
    # op.add_column('applications', sa.Column('is_deleted', mysql.TINYINT(display_width=1), server_default=sa.text("'0'"), autoincrement=False, nullable=False))
    # op.add_column('applications', sa.Column('createdBy', mysql.CHAR(length=36), nullable=True))
    # op.drop_constraint(None, 'applications', type_='foreignkey')
    # op.drop_constraint('fk_application_updated_by', 'applications', type_='foreignkey')
    # op.drop_constraint('fk_application_created_by', 'applications', type_='foreignkey')
    # op.drop_constraint(None, 'applications', type_='foreignkey')
    # op.create_foreign_key(op.f('fk_applications_organizationId_organizations'), 'applications', 'organizations', ['organizationId'], ['id'], ondelete='CASCADE')
    # op.create_foreign_key(op.f('fk_applications_deletedBy_people'), 'applications', 'users', ['deletedBy'], ['id'], ondelete='SET NULL')
    # op.create_foreign_key(op.f('fk_applications_updatedBy_people'), 'applications', 'users', ['updatedBy'], ['id'], ondelete='SET NULL')
    # op.create_foreign_key(op.f('fk_applications_createdBy_people'), 'applications', 'users', ['createdBy'], ['id'], ondelete='SET NULL')
    # op.create_foreign_key(op.f('fk_applications_appOwnerId_users'), 'applications', 'users', ['appOwnerId'], ['id'], ondelete='SET NULL')
    # op.drop_constraint('_application_name_organization_uc', 'applications', type_='unique')
    # op.create_index(op.f('ix_applications_updatedBy'), 'applications', ['updatedBy'], unique=False)
    # op.create_index(op.f('ix_applications_status'), 'applications', ['status'], unique=False)
    # op.create_index(op.f('ix_applications_organizationId'), 'applications', ['organizationId'], unique=False)
    # op.create_index(op.f('ix_applications_name'), 'applications', ['name'], unique=True)
    # op.create_index(op.f('ix_applications_is_deleted'), 'applications', ['is_deleted'], unique=False)
    # op.create_index(op.f('ix_applications_id'), 'applications', ['id'], unique=False)
    # op.create_index(op.f('ix_applications_deletedBy'), 'applications', ['deletedBy'], unique=False)
    # op.create_index(op.f('ix_applications_createdBy'), 'applications', ['createdBy'], unique=False)
    # op.create_index(op.f('ix_applications_appOwnerId'), 'applications', ['appOwnerId'], unique=False)
    # op.drop_column('applications', 'updatedById')
    # op.drop_column('applications', 'createdById')
    # op.drop_column('applications', 'derivedRTO')
    # op.drop_column('applications', 'workarounds')
    # op.drop_column('applications', 'hostedOn')
    # op.drop_column('applications', 'type')
    # op.drop_table('process_locations')
    # op.drop_table('process_dependencies')
    # op.drop_table('process_applications')
    # op.drop_table('processes')
    # op.drop_table('bia_impact_scale_levels')
    # op.drop_index(op.f('ix_vendors_organizationId'), table_name='vendors')
    # op.drop_index(op.f('ix_vendors_name'), table_name='vendors')
    # op.drop_index(op.f('ix_vendors_id'), table_name='vendors')
    # op.drop_table('vendors')
    # op.drop_table('bia_timeframes')
    # op.drop_table('bia_impact_scales')
    # ### end Alembic commands ###
