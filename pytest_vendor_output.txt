============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-8.3.5, pluggy-1.6.0 -- /Users/bharats/Library/CloudStorage/OneDrive-CYRAACSERVICESPRIVATELIMITED/Work/Product Management/Replit Projects/BCMS/Windsurf/venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/bharats/Library/CloudStorage/OneDrive-CYRAACSERVICESPRIVATELIMITED/Work/Product Management/Replit Projects/BCMS/Windsurf/backend
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-1.0.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 39 items

backend/app/tests/api/test_vendors_api.py::test_create_vendor_as_admin_success ERROR [  2%]
backend/app/tests/api/test_vendors_api.py::test_create_vendor_as_non_admin_forbidden ERROR [  5%]
backend/app/tests/api/test_vendors_api.py::test_create_vendor_duplicate_name_conflict ERROR [  7%]
backend/app/tests/api/test_vendors_api.py::test_create_vendor_missing_name_bad_request ERROR [ 10%]
backend/app/tests/api/test_vendors_api.py::test_create_vendor_invalid_email_bad_request ERROR [ 12%]
backend/app/tests/api/test_vendors_api.py::test_create_vendor_invalid_criticality_bad_request ERROR [ 15%]
backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_admin_success ERROR [ 17%]
backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_bcm_manager_success ERROR [ 20%]
backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_ciso_success ERROR [ 23%]
backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_standard_user_forbidden ERROR [ 25%]
backend/app/tests/api/test_vendors_api.py::test_read_vendor_not_found ERROR [ 28%]
backend/app/tests/api/test_vendors_api.py::test_read_vendor_different_organization_forbidden ERROR [ 30%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_admin_success ERROR [ 33%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_bcm_manager_success ERROR [ 35%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_ciso_success ERROR [ 38%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_standard_user_forbidden ERROR [ 41%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_pagination ERROR [ 43%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_empty_for_organization ERROR [ 46%]
backend/app/tests/api/test_vendors_api.py::test_list_vendors_organization_scoping ERROR [ 48%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_admin_success ERROR [ 51%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_partial_update_success ERROR [ 53%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_non_admin_forbidden[bcm_manager_client] ERROR [ 56%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_non_admin_forbidden[ciso_client] ERROR [ 58%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_non_admin_forbidden[standard_user_client] ERROR [ 61%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_name_conflict ERROR [ 64%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_not_found ERROR [ 66%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_different_organization_forbidden ERROR [ 69%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_empty_name_bad_request ERROR [ 71%]
backend/app/tests/api/test_vendors_api.py::test_update_inactive_vendor_unprocessable ERROR [ 74%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_invalid_email_validation_error ERROR [ 76%]
backend/app/tests/api/test_vendors_api.py::test_update_vendor_invalid_criticality_validation_error ERROR [ 79%]
backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_admin_success ERROR [ 82%]
backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_non_admin_forbidden[bcm_manager_client] ERROR [ 84%]
backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_non_admin_forbidden[ciso_client] ERROR [ 87%]
backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_non_admin_forbidden[standard_user_client] ERROR [ 89%]
backend/app/tests/api/test_vendors_api.py::test_delete_vendor_not_found ERROR [ 92%]
backend/app/tests/api/test_vendors_api.py::test_delete_vendor_different_organization_forbidden ERROR [ 94%]
backend/app/tests/api/test_vendors_api.py::test_delete_already_inactive_vendor_idempotent ERROR [ 97%]
backend/app/tests/api/test_vendors_api.py::test_deleted_vendor_not_in_list_and_cannot_be_updated ERROR [100%]

==================================== ERRORS ====================================
____________ ERROR at setup of test_create_vendor_as_admin_success _____________

self = <Mapper at 0x103fe92e0; User>, key = 'headed_departments'
_configure_mappers = False

    def get_property(
        self, key: str, _configure_mappers: bool = False
    ) -> MapperProperty[Any]:
        """return a MapperProperty associated with the given key."""
    
        if _configure_mappers:
            self._check_configure()
    
        try:
>           return self._props[key]
E           KeyError: 'headed_departments'

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2522: KeyError

The above exception was the direct cause of the following exception:

request = <SubRequest 'async_db_session' for <Coroutine test_create_vendor_as_admin_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104286820>
setup_task = <Task finished name='Task-4' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, de... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4255: in _do_configure_registries
    mapper._post_configure_properties()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2418: in _post_configure_properties
    prop.init()
venv/lib/python3.9/site-packages/sqlalchemy/orm/interfaces.py:589: in init
    self.do_init()
venv/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:1661: in do_init
    self._generate_backref()
venv/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:2145: in _generate_backref
    self._add_reverse_property(self.back_populates)
venv/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:1592: in _add_reverse_property
    other = self.mapper.get_property(key, _configure_mappers=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mapper at 0x103fe92e0; User>, key = 'headed_departments'
_configure_mappers = False

    def get_property(
        self, key: str, _configure_mappers: bool = False
    ) -> MapperProperty[Any]:
        """return a MapperProperty associated with the given key."""
    
        if _configure_mappers:
            self._check_configure()
    
        try:
            return self._props[key]
        except KeyError as err:
>           raise sa_exc.InvalidRequestError(
                f"Mapper '{self}' has no property '{key}'.  If this property "
                "was indicated from other mappers or configure events, ensure "
                "registry.configure() has been called."
            ) from err
E           sqlalchemy.exc.InvalidRequestError: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2524: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
DEBUG [conftest.py create_test_tables]: All tables created.
DEBUG [conftest.py create_test_tables - SYNC]: Table 'people' not found.
DEBUG [conftest.py create_test_tables - SYNC]: Schema for table 'organizations':
  SYNC Column: id, Type: CHAR(32)
  SYNC Column: name, Type: VARCHAR(255)
  SYNC Column: description, Type: TEXT
  SYNC Column: industry, Type: VARCHAR(100)
  SYNC Column: isActive, Type: BOOLEAN
  SYNC Column: createdAt, Type: DATETIME
  SYNC Column: updatedAt, Type: DATETIME
DEBUG [conftest.py create_test_tables - SYNC]: Schema for table 'roles':
  SYNC Column: id, Type: CHAR(32)
  SYNC Column: name, Type: VARCHAR(50)
  SYNC Column: description, Type: TEXT
  SYNC Column: organization_id, Type: CHAR(32)
  SYNC Column: createdAt, Type: DATETIME
  SYNC Column: updatedAt, Type: DATETIME
DEBUG [conftest.py create_test_tables - SYNC]: Schema for table 'permissions':
  SYNC Column: id, Type: CHAR(32)
  SYNC Column: name, Type: VARCHAR(255)
  SYNC Column: description, Type: TEXT
  SYNC Column: createdAt, Type: DATETIME
  SYNC Column: updatedAt, Type: DATETIME
DEBUG [conftest.py create_test_tables - SYNC]: Table 'people_roles' not found.
DEBUG [conftest.py create_test_tables - SYNC]: Schema for table 'role_permissions':
  SYNC Column: role_id, Type: CHAR(32)
  SYNC Column: permission_id, Type: CHAR(32)
DEBUG [conftest.py create_test_tables - SYNC]: Schema for table 'applications':
  SYNC Column: id, Type: CHAR(32)
  SYNC Column: name, Type: VARCHAR(255)
  SYNC Column: description, Type: TEXT
  SYNC Column: type, Type: VARCHAR(5)
    SYNC 'applications.type' column found. Type: VARCHAR(5)
  SYNC Column: hostedOn, Type: VARCHAR(255)
  SYNC Column: workarounds, Type: TEXT
  SYNC Column: derivedRTO, Type: VARCHAR(50)
  SYNC Column: status, Type: VARCHAR(8)
  SYNC Column: criticality, Type: VARCHAR(50)
  SYNC Column: organizationId, Type: CHAR(32)
  SYNC Column: appOwnerId, Type: CHAR(32)
  SYNC Column: createdAt, Type: DATETIME
  SYNC Column: updatedAt, Type: DATETIME
  SYNC Column: createdById, Type: CHAR(32)
  SYNC Column: updatedById, Type: CHAR(32)
DEBUG [conftest.py create_test_tables_async]: Creating async tables...
DEBUG [conftest.py create_test_tables_async]: Async tables created.
DEBUG [conftest.py create_test_tables_async - ASYNC]: Schema for table 'applications':
  ASYNC Column: id, Type: CHAR(32)
  ASYNC Column: name, Type: VARCHAR(255)
  ASYNC Column: description, Type: TEXT
  ASYNC Column: type, Type: VARCHAR(5)
    ASYNC 'applications.type' column found. Type: VARCHAR(5)
  ASYNC Column: hostedOn, Type: VARCHAR(255)
  ASYNC Column: workarounds, Type: TEXT
  ASYNC Column: derivedRTO, Type: VARCHAR(50)
  ASYNC Column: status, Type: VARCHAR(8)
  ASYNC Column: criticality, Type: VARCHAR(50)
  ASYNC Column: organizationId, Type: CHAR(32)
  ASYNC Column: appOwnerId, Type: CHAR(32)
  ASYNC Column: createdAt, Type: DATETIME
  ASYNC Column: updatedAt, Type: DATETIME
  ASYNC Column: createdById, Type: CHAR(32)
  ASYNC Column: updatedById, Type: CHAR(32)
ERROR in async_db_session setup: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_________ ERROR at setup of test_create_vendor_as_non_admin_forbidden __________

request = <SubRequest 'async_db_session' for <Coroutine test_create_vendor_as_non_admin_forbidden>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f040>
setup_task = <Task finished name='Task-9' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, de... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_________ ERROR at setup of test_create_vendor_duplicate_name_conflict _________

request = <SubRequest 'async_db_session' for <Coroutine test_create_vendor_duplicate_name_conflict>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104857280>
setup_task = <Task finished name='Task-14' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________ ERROR at setup of test_create_vendor_missing_name_bad_request _________

request = <SubRequest 'async_db_session' for <Coroutine test_create_vendor_missing_name_bad_request>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f040>
setup_task = <Task finished name='Task-19' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________ ERROR at setup of test_create_vendor_invalid_email_bad_request ________

request = <SubRequest 'async_db_session' for <Coroutine test_create_vendor_invalid_email_bad_request>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1fa60>
setup_task = <Task finished name='Task-24' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_____ ERROR at setup of test_create_vendor_invalid_criticality_bad_request _____

request = <SubRequest 'async_db_session' for <Coroutine test_create_vendor_invalid_criticality_bad_request>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f040>
setup_task = <Task finished name='Task-29' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_____________ ERROR at setup of test_read_vendor_as_admin_success ______________

request = <SubRequest 'async_db_session' for <Coroutine test_read_vendor_as_admin_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104c115e0>
setup_task = <Task finished name='Task-34' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
__________ ERROR at setup of test_read_vendor_as_bcm_manager_success ___________

request = <SubRequest 'async_db_session' for <Coroutine test_read_vendor_as_bcm_manager_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1055675e0>
setup_task = <Task finished name='Task-39' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
______________ ERROR at setup of test_read_vendor_as_ciso_success ______________

request = <SubRequest 'async_db_session' for <Coroutine test_read_vendor_as_ciso_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1048571f0>
setup_task = <Task finished name='Task-44' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________ ERROR at setup of test_read_vendor_as_standard_user_forbidden _________

request = <SubRequest 'async_db_session' for <Coroutine test_read_vendor_as_standard_user_forbidden>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1048a39d0>
setup_task = <Task finished name='Task-49' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_________________ ERROR at setup of test_read_vendor_not_found _________________

request = <SubRequest 'async_db_session' for <Coroutine test_read_vendor_not_found>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1048a3430>
setup_task = <Task finished name='Task-54' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_____ ERROR at setup of test_read_vendor_different_organization_forbidden ______

request = <SubRequest 'async_db_session' for <Coroutine test_read_vendor_different_organization_forbidden>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f310>
setup_task = <Task finished name='Task-59' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_____________ ERROR at setup of test_list_vendors_as_admin_success _____________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_as_admin_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f160>
setup_task = <Task finished name='Task-64' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
__________ ERROR at setup of test_list_vendors_as_bcm_manager_success __________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_as_bcm_manager_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1051b4e50>
setup_task = <Task finished name='Task-69' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_____________ ERROR at setup of test_list_vendors_as_ciso_success ______________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_as_ciso_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105c54f70>
setup_task = <Task finished name='Task-74' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________ ERROR at setup of test_list_vendors_as_standard_user_forbidden ________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_as_standard_user_forbidden>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104c34c10>
setup_task = <Task finished name='Task-79' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________________ ERROR at setup of test_list_vendors_pagination ________________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_pagination>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105c54f70>
setup_task = <Task finished name='Task-84' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
__________ ERROR at setup of test_list_vendors_empty_for_organization __________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_empty_for_organization>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1041b3280>
setup_task = <Task finished name='Task-89' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
___________ ERROR at setup of test_list_vendors_organization_scoping ___________

request = <SubRequest 'async_db_session' for <Coroutine test_list_vendors_organization_scoping>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105567280>
setup_task = <Task finished name='Task-94' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
____________ ERROR at setup of test_update_vendor_as_admin_success _____________

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_as_admin_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104c34ca0>
setup_task = <Task finished name='Task-99' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, d... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_________ ERROR at setup of test_update_vendor_partial_update_success __________

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_partial_update_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1055675e0>
setup_task = <Task finished name='Task-104' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_ ERROR at setup of test_update_vendor_as_non_admin_forbidden[bcm_manager_client] _

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_as_non_admin_forbidden[bcm_manager_client]>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f160>
setup_task = <Task finished name='Task-109' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
___ ERROR at setup of test_update_vendor_as_non_admin_forbidden[ciso_client] ___

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_as_non_admin_forbidden[ciso_client]>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104c34ca0>
setup_task = <Task finished name='Task-114' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_ ERROR at setup of test_update_vendor_as_non_admin_forbidden[standard_user_client] _

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_as_non_admin_forbidden[standard_user_client]>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1051b4dc0>
setup_task = <Task finished name='Task-119' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
______________ ERROR at setup of test_update_vendor_name_conflict ______________

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_name_conflict>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1048a3040>
setup_task = <Task finished name='Task-124' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________________ ERROR at setup of test_update_vendor_not_found ________________

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_not_found>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1048a3820>
setup_task = <Task finished name='Task-129' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
____ ERROR at setup of test_update_vendor_different_organization_forbidden _____

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_different_organization_forbidden>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1fa60>
setup_task = <Task finished name='Task-134' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_________ ERROR at setup of test_update_vendor_empty_name_bad_request __________

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_empty_name_bad_request>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f8b0>
setup_task = <Task finished name='Task-139' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_________ ERROR at setup of test_update_inactive_vendor_unprocessable __________

request = <SubRequest 'async_db_session' for <Coroutine test_update_inactive_vendor_unprocessable>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1f160>
setup_task = <Task finished name='Task-144' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_____ ERROR at setup of test_update_vendor_invalid_email_validation_error ______

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_invalid_email_validation_error>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1051b4af0>
setup_task = <Task finished name='Task-149' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
__ ERROR at setup of test_update_vendor_invalid_criticality_validation_error ___

request = <SubRequest 'async_db_session' for <Coroutine test_update_vendor_invalid_criticality_validation_error>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1051b4700>
setup_task = <Task finished name='Task-154' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
____________ ERROR at setup of test_delete_vendor_as_admin_success _____________

request = <SubRequest 'async_db_session' for <Coroutine test_delete_vendor_as_admin_success>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1055674c0>
setup_task = <Task finished name='Task-159' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_ ERROR at setup of test_delete_vendor_as_non_admin_forbidden[bcm_manager_client] _

request = <SubRequest 'async_db_session' for <Coroutine test_delete_vendor_as_non_admin_forbidden[bcm_manager_client]>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104c34a60>
setup_task = <Task finished name='Task-164' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
___ ERROR at setup of test_delete_vendor_as_non_admin_forbidden[ciso_client] ___

request = <SubRequest 'async_db_session' for <Coroutine test_delete_vendor_as_non_admin_forbidden[ciso_client]>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1041b33a0>
setup_task = <Task finished name='Task-169' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_ ERROR at setup of test_delete_vendor_as_non_admin_forbidden[standard_user_client] _

request = <SubRequest 'async_db_session' for <Coroutine test_delete_vendor_as_non_admin_forbidden[standard_user_client]>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105056550>
setup_task = <Task finished name='Task-174' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
________________ ERROR at setup of test_delete_vendor_not_found ________________

request = <SubRequest 'async_db_session' for <Coroutine test_delete_vendor_not_found>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1048a3280>
setup_task = <Task finished name='Task-179' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
____ ERROR at setup of test_delete_vendor_different_organization_forbidden _____

request = <SubRequest 'async_db_session' for <Coroutine test_delete_vendor_different_organization_forbidden>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x104c34790>
setup_task = <Task finished name='Task-184' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
_______ ERROR at setup of test_delete_already_inactive_vendor_idempotent _______

request = <SubRequest 'async_db_session' for <Coroutine test_delete_already_inactive_vendor_idempotent>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x105f1fa60>
setup_task = <Task finished name='Task-189' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
___ ERROR at setup of test_deleted_vendor_not_in_list_and_cannot_be_updated ____

request = <SubRequest 'async_db_session' for <Coroutine test_deleted_vendor_not_in_list_and_cannot_be_updated>>
kwargs = {'async_engine_fixture': <sqlalchemy.ext.asyncio.engine.AsyncEngine object at 0x10427e780>}
func = <function async_db_session at 0x1040cb430>
event_loop_fixture_id = '_function_event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x1041b3280>
setup_task = <Task finished name='Task-194' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup() done, ... If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.")>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py:642: in run_until_complete
    return future.result()
venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py:316: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
backend/app/tests/conftest.py:115: in async_db_session
    default_org_obj = await session.get(OrganizationModel, DEFAULT_ORG_ID)
venv/lib/python3.9/site-packages/sqlalchemy/ext/asyncio/session.py:606: in get
    return await greenlet_spawn(
venv/lib/python3.9/site-packages/sqlalchemy/util/_concurrency_py3k.py:190: in greenlet_spawn
    result = context.switch(*args, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3694: in get
    return self._get_impl(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
    return db_load_fn(
venv/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:694: in load_on_pk_identity
    session.execute(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1629: in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:711: in _compile_w_cache
    compiled_sql = self._compiler(
venv/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:320: in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:1446: in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:886: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:932: in process
    return obj._compiler_dispatch(self, **kwargs)
venv/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
venv/lib/python3.9/site-packages/sqlalchemy/sql/compiler.py:4728: in visit_select
    compile_state = select_stmt._compile_state_factory(
venv/lib/python3.9/site-packages/sqlalchemy/sql/base.py:687: in create_for_statement
    return klass.create_for_statement(statement, compiler, **kw)
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:447: in create_for_statement
    return cls._create_orm_context(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:1175: in _create_orm_context
    _QueryEntity.to_compile_state(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2628: in to_compile_state
    _MapperEntity(
venv/lib/python3.9/site-packages/sqlalchemy/orm/context.py:2708: in __init__
    entity._post_inspect
venv/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:1338: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2724: in _post_inspect
    self._check_configure()
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv/lib/python3.9/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
ERROR in async_db_session setup: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
=============================== warnings summary ===============================
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323
  /Users/bharats/Library/CloudStorage/OneDrive-CYRAACSERVICESPRIVATELIMITED/Work/Product Management/Replit Projects/BCMS/Windsurf/venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:373
  /Users/bharats/Library/CloudStorage/OneDrive-CYRAACSERVICESPRIVATELIMITED/Work/Product Management/Replit Projects/BCMS/Windsurf/venv/lib/python3.9/site-packages/pydantic/_internal/_config.py:373: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
ERROR backend/app/tests/api/test_vendors_api.py::test_create_vendor_as_admin_success - sqlalchemy.exc.InvalidRequestError: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_create_vendor_as_non_admin_forbidden - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_create_vendor_duplicate_name_conflict - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_create_vendor_missing_name_bad_request - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_create_vendor_invalid_email_bad_request - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_create_vendor_invalid_criticality_bad_request - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_admin_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_bcm_manager_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_ciso_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_read_vendor_as_standard_user_forbidden - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_read_vendor_not_found - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_read_vendor_different_organization_forbidden - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_admin_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_bcm_manager_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_ciso_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_as_standard_user_forbidden - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_pagination - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_empty_for_organization - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_list_vendors_organization_scoping - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_admin_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_partial_update_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_non_admin_forbidden[bcm_manager_client] - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_non_admin_forbidden[ciso_client] - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_as_non_admin_forbidden[standard_user_client] - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_name_conflict - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_not_found - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_different_organization_forbidden - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_empty_name_bad_request - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_inactive_vendor_unprocessable - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_invalid_email_validation_error - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_update_vendor_invalid_criticality_validation_error - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_admin_success - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_non_admin_forbidden[bcm_manager_client] - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_non_admin_forbidden[ciso_client] - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_vendor_as_non_admin_forbidden[standard_user_client] - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_vendor_not_found - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_vendor_different_organization_forbidden - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_delete_already_inactive_vendor_idempotent - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
ERROR backend/app/tests/api/test_vendors_api.py::test_deleted_vendor_not_in_list_and_cannot_be_updated - sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Department(departments)]'. Original exception was: Mapper 'Mapper[User(users)]' has no property 'headed_departments'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.
======================= 8 warnings, 39 errors in 26.44s ========================
